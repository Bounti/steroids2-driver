// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jtag_cmd.proto

#include "jtag_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_jtag_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HL_COMMAND_jtag_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jtag_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JTAG_COMMAND_jtag_5fcmd_2eproto;
namespace usb2jtag {
class JTAG_COMMANDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JTAG_COMMAND> _instance;
} _JTAG_COMMAND_default_instance_;
class HL_COMMANDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HL_COMMAND> _instance;
} _HL_COMMAND_default_instance_;
class PROTOCOLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROTOCOL> _instance;
} _PROTOCOL_default_instance_;
}  // namespace usb2jtag
static void InitDefaultsscc_info_HL_COMMAND_jtag_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usb2jtag::_HL_COMMAND_default_instance_;
    new (ptr) ::usb2jtag::HL_COMMAND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usb2jtag::HL_COMMAND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HL_COMMAND_jtag_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HL_COMMAND_jtag_5fcmd_2eproto}, {
      &scc_info_JTAG_COMMAND_jtag_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_JTAG_COMMAND_jtag_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usb2jtag::_JTAG_COMMAND_default_instance_;
    new (ptr) ::usb2jtag::JTAG_COMMAND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usb2jtag::JTAG_COMMAND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JTAG_COMMAND_jtag_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JTAG_COMMAND_jtag_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_PROTOCOL_jtag_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usb2jtag::_PROTOCOL_default_instance_;
    new (ptr) ::usb2jtag::PROTOCOL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usb2jtag::PROTOCOL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROTOCOL_jtag_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROTOCOL_jtag_5fcmd_2eproto}, {
      &scc_info_HL_COMMAND_jtag_5fcmd_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jtag_5fcmd_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_jtag_5fcmd_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jtag_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jtag_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, jtag_start_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, jtag_end_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, bitcount_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, period_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, payload_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, data_offset_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, data_length_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, data_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, data_is_other_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::JTAG_COMMAND, data_is_address_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::usb2jtag::HL_COMMAND, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::HL_COMMAND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::usb2jtag::HL_COMMAND, type_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::HL_COMMAND, commands_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::HL_COMMAND, size_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::usb2jtag::PROTOCOL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::PROTOCOL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::usb2jtag::PROTOCOL, target_),
  PROTOBUF_FIELD_OFFSET(::usb2jtag::PROTOCOL, commands_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::usb2jtag::JTAG_COMMAND)},
  { 25, 33, sizeof(::usb2jtag::HL_COMMAND)},
  { 36, 43, sizeof(::usb2jtag::PROTOCOL)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::usb2jtag::_JTAG_COMMAND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::usb2jtag::_HL_COMMAND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::usb2jtag::_PROTOCOL_default_instance_),
};

const char descriptor_table_protodef_jtag_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016jtag_cmd.proto\022\010usb2jtag\"\321\002\n\014JTAG_COMM"
  "AND\0224\n\njtag_start\030\001 \002(\0162 .usb2jtag.JTAG_"
  "COMMAND.JTAGState\0222\n\010jtag_end\030\002 \002(\0162 .us"
  "b2jtag.JTAG_COMMAND.JTAGState\022\020\n\010bitcoun"
  "t\030\003 \002(\r\022\016\n\006period\030\004 \002(\r\022\017\n\007payload\030\005 \002(\004"
  "\022\023\n\013data_offset\030\006 \002(\r\022\023\n\013data_length\030\007 \002"
  "(\r\022\014\n\004data\030\010 \002(\004\022\025\n\rdata_is_other\030\t \002(\010\022"
  "\027\n\017data_is_address\030\n \002(\010\"<\n\tJTAGState\022\010\n"
  "\004IDLE\020\000\022\t\n\005RESET\020\001\022\014\n\010SHIFT_DR\020\002\022\014\n\010SHIF"
  "T_IR\020\003\"\235\001\n\nHL_COMMAND\022+\n\004type\030\001 \002(\0162\035.us"
  "b2jtag.HL_COMMAND.CMD_TYPE\022(\n\010commands\030\002"
  " \003(\0132\026.usb2jtag.JTAG_COMMAND\022\014\n\004size\030\003 \002"
  "(\r\"*\n\010CMD_TYPE\022\010\n\004READ\020\000\022\t\n\005WRITE\020\001\022\t\n\005R"
  "ESET\020\002\"B\n\010PROTOCOL\022\016\n\006target\030\001 \002(\t\022&\n\010co"
  "mmands\030\002 \003(\0132\024.usb2jtag.HL_COMMAND"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jtag_5fcmd_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jtag_5fcmd_2eproto_sccs[3] = {
  &scc_info_HL_COMMAND_jtag_5fcmd_2eproto.base,
  &scc_info_JTAG_COMMAND_jtag_5fcmd_2eproto.base,
  &scc_info_PROTOCOL_jtag_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jtag_5fcmd_2eproto_once;
static bool descriptor_table_jtag_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jtag_5fcmd_2eproto = {
  &descriptor_table_jtag_5fcmd_2eproto_initialized, descriptor_table_protodef_jtag_5fcmd_2eproto, "jtag_cmd.proto", 594,
  &descriptor_table_jtag_5fcmd_2eproto_once, descriptor_table_jtag_5fcmd_2eproto_sccs, descriptor_table_jtag_5fcmd_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_jtag_5fcmd_2eproto::offsets,
  file_level_metadata_jtag_5fcmd_2eproto, 3, file_level_enum_descriptors_jtag_5fcmd_2eproto, file_level_service_descriptors_jtag_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jtag_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jtag_5fcmd_2eproto), true);
namespace usb2jtag {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JTAG_COMMAND_JTAGState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jtag_5fcmd_2eproto);
  return file_level_enum_descriptors_jtag_5fcmd_2eproto[0];
}
bool JTAG_COMMAND_JTAGState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JTAG_COMMAND_JTAGState JTAG_COMMAND::IDLE;
constexpr JTAG_COMMAND_JTAGState JTAG_COMMAND::RESET;
constexpr JTAG_COMMAND_JTAGState JTAG_COMMAND::SHIFT_DR;
constexpr JTAG_COMMAND_JTAGState JTAG_COMMAND::SHIFT_IR;
constexpr JTAG_COMMAND_JTAGState JTAG_COMMAND::JTAGState_MIN;
constexpr JTAG_COMMAND_JTAGState JTAG_COMMAND::JTAGState_MAX;
constexpr int JTAG_COMMAND::JTAGState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HL_COMMAND_CMD_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jtag_5fcmd_2eproto);
  return file_level_enum_descriptors_jtag_5fcmd_2eproto[1];
}
bool HL_COMMAND_CMD_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND::READ;
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND::WRITE;
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND::RESET;
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND::CMD_TYPE_MIN;
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND::CMD_TYPE_MAX;
constexpr int HL_COMMAND::CMD_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void JTAG_COMMAND::InitAsDefaultInstance() {
}
class JTAG_COMMAND::_Internal {
 public:
  using HasBits = decltype(std::declval<JTAG_COMMAND>()._has_bits_);
  static void set_has_jtag_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jtag_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bitcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_data_is_other(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_data_is_address(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

JTAG_COMMAND::JTAG_COMMAND()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:usb2jtag.JTAG_COMMAND)
}
JTAG_COMMAND::JTAG_COMMAND(const JTAG_COMMAND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&jtag_start_, &from.jtag_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_is_address_) -
    reinterpret_cast<char*>(&jtag_start_)) + sizeof(data_is_address_));
  // @@protoc_insertion_point(copy_constructor:usb2jtag.JTAG_COMMAND)
}

void JTAG_COMMAND::SharedCtor() {
  ::memset(&jtag_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_is_address_) -
      reinterpret_cast<char*>(&jtag_start_)) + sizeof(data_is_address_));
}

JTAG_COMMAND::~JTAG_COMMAND() {
  // @@protoc_insertion_point(destructor:usb2jtag.JTAG_COMMAND)
  SharedDtor();
}

void JTAG_COMMAND::SharedDtor() {
}

void JTAG_COMMAND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JTAG_COMMAND& JTAG_COMMAND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JTAG_COMMAND_jtag_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void JTAG_COMMAND::Clear() {
// @@protoc_insertion_point(message_clear_start:usb2jtag.JTAG_COMMAND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&jtag_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_) -
        reinterpret_cast<char*>(&jtag_start_)) + sizeof(data_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&data_is_other_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_is_address_) -
        reinterpret_cast<char*>(&data_is_other_)) + sizeof(data_is_address_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JTAG_COMMAND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::usb2jtag::JTAG_COMMAND_JTAGState_IsValid(val))) {
            set_jtag_start(static_cast<::usb2jtag::JTAG_COMMAND_JTAGState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::usb2jtag::JTAG_COMMAND_JTAGState_IsValid(val))) {
            set_jtag_end(static_cast<::usb2jtag::JTAG_COMMAND_JTAGState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 bitcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bitcount(&has_bits);
          bitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_period(&has_bits);
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_payload(&has_bits);
          payload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_data_offset(&has_bits);
          data_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_data_length(&has_bits);
          data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool data_is_other = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_data_is_other(&has_bits);
          data_is_other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool data_is_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_data_is_address(&has_bits);
          data_is_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JTAG_COMMAND::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:usb2jtag.JTAG_COMMAND)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usb2jtag::JTAG_COMMAND_JTAGState_IsValid(value)) {
            set_jtag_start(static_cast< ::usb2jtag::JTAG_COMMAND_JTAGState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usb2jtag::JTAG_COMMAND_JTAGState_IsValid(value)) {
            set_jtag_end(static_cast< ::usb2jtag::JTAG_COMMAND_JTAGState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bitcount = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_bitcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 period = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_period(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 payload = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_payload(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 data_offset = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_data_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 data_length = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_data_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 data = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_data(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool data_is_other = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_data_is_other(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_is_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool data_is_address = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_data_is_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_is_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usb2jtag.JTAG_COMMAND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usb2jtag.JTAG_COMMAND)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* JTAG_COMMAND::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usb2jtag.JTAG_COMMAND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_start = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->jtag_start(), target);
  }

  // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_end = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->jtag_end(), target);
  }

  // required uint32 bitcount = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->bitcount(), target);
  }

  // required uint32 period = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->period(), target);
  }

  // required uint64 payload = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->payload(), target);
  }

  // required uint32 data_offset = 6;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->data_offset(), target);
  }

  // required uint32 data_length = 7;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_length(), target);
  }

  // required uint64 data = 8;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->data(), target);
  }

  // required bool data_is_other = 9;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->data_is_other(), target);
  }

  // required bool data_is_address = 10;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->data_is_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usb2jtag.JTAG_COMMAND)
  return target;
}

size_t JTAG_COMMAND::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:usb2jtag.JTAG_COMMAND)
  size_t total_size = 0;

  if (has_jtag_start()) {
    // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->jtag_start());
  }

  if (has_jtag_end()) {
    // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_end = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->jtag_end());
  }

  if (has_bitcount()) {
    // required uint32 bitcount = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bitcount());
  }

  if (has_period()) {
    // required uint32 period = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->period());
  }

  if (has_payload()) {
    // required uint64 payload = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->payload());
  }

  if (has_data_offset()) {
    // required uint32 data_offset = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->data_offset());
  }

  if (has_data_length()) {
    // required uint32 data_length = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->data_length());
  }

  if (has_data()) {
    // required uint64 data = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->data());
  }

  if (has_data_is_other()) {
    // required bool data_is_other = 9;
    total_size += 1 + 1;
  }

  if (has_data_is_address()) {
    // required bool data_is_address = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t JTAG_COMMAND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usb2jtag.JTAG_COMMAND)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->jtag_start());

    // required .usb2jtag.JTAG_COMMAND.JTAGState jtag_end = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->jtag_end());

    // required uint32 bitcount = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bitcount());

    // required uint32 period = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->period());

    // required uint64 payload = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->payload());

    // required uint32 data_offset = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->data_offset());

    // required uint32 data_length = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->data_length());

    // required uint64 data = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->data());

    // required bool data_is_other = 9;
    total_size += 1 + 1;

    // required bool data_is_address = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JTAG_COMMAND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usb2jtag.JTAG_COMMAND)
  GOOGLE_DCHECK_NE(&from, this);
  const JTAG_COMMAND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JTAG_COMMAND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usb2jtag.JTAG_COMMAND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usb2jtag.JTAG_COMMAND)
    MergeFrom(*source);
  }
}

void JTAG_COMMAND::MergeFrom(const JTAG_COMMAND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usb2jtag.JTAG_COMMAND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      jtag_start_ = from.jtag_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      jtag_end_ = from.jtag_end_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitcount_ = from.bitcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      period_ = from.period_;
    }
    if (cached_has_bits & 0x00000010u) {
      payload_ = from.payload_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_offset_ = from.data_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_length_ = from.data_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      data_ = from.data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      data_is_other_ = from.data_is_other_;
    }
    if (cached_has_bits & 0x00000200u) {
      data_is_address_ = from.data_is_address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JTAG_COMMAND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usb2jtag.JTAG_COMMAND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JTAG_COMMAND::CopyFrom(const JTAG_COMMAND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usb2jtag.JTAG_COMMAND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JTAG_COMMAND::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void JTAG_COMMAND::InternalSwap(JTAG_COMMAND* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(jtag_start_, other->jtag_start_);
  swap(jtag_end_, other->jtag_end_);
  swap(bitcount_, other->bitcount_);
  swap(period_, other->period_);
  swap(payload_, other->payload_);
  swap(data_offset_, other->data_offset_);
  swap(data_length_, other->data_length_);
  swap(data_, other->data_);
  swap(data_is_other_, other->data_is_other_);
  swap(data_is_address_, other->data_is_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JTAG_COMMAND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HL_COMMAND::InitAsDefaultInstance() {
}
class HL_COMMAND::_Internal {
 public:
  using HasBits = decltype(std::declval<HL_COMMAND>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HL_COMMAND::HL_COMMAND()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:usb2jtag.HL_COMMAND)
}
HL_COMMAND::HL_COMMAND(const HL_COMMAND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:usb2jtag.HL_COMMAND)
}

void HL_COMMAND::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HL_COMMAND_jtag_5fcmd_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

HL_COMMAND::~HL_COMMAND() {
  // @@protoc_insertion_point(destructor:usb2jtag.HL_COMMAND)
  SharedDtor();
}

void HL_COMMAND::SharedDtor() {
}

void HL_COMMAND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HL_COMMAND& HL_COMMAND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HL_COMMAND_jtag_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void HL_COMMAND::Clear() {
// @@protoc_insertion_point(message_clear_start:usb2jtag.HL_COMMAND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&type_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HL_COMMAND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::usb2jtag::HL_COMMAND_CMD_TYPE_IsValid(val))) {
            set_type(static_cast<::usb2jtag::HL_COMMAND_CMD_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .usb2jtag.JTAG_COMMAND commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HL_COMMAND::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:usb2jtag.HL_COMMAND)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usb2jtag::HL_COMMAND_CMD_TYPE_IsValid(value)) {
            set_type(static_cast< ::usb2jtag::HL_COMMAND_CMD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .usb2jtag.JTAG_COMMAND commands = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usb2jtag.HL_COMMAND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usb2jtag.HL_COMMAND)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* HL_COMMAND::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usb2jtag.HL_COMMAND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .usb2jtag.JTAG_COMMAND commands = 2;
  for (auto it = this->commands_.pointer_begin(),
            end = this->commands_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, **it, target, stream);
  }

  // required uint32 size = 3;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usb2jtag.HL_COMMAND)
  return target;
}

size_t HL_COMMAND::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:usb2jtag.HL_COMMAND)
  size_t total_size = 0;

  if (has_type()) {
    // required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_size()) {
    // required uint32 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
size_t HL_COMMAND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usb2jtag.HL_COMMAND)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .usb2jtag.JTAG_COMMAND commands = 2;
  total_size += 1UL * this->commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HL_COMMAND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usb2jtag.HL_COMMAND)
  GOOGLE_DCHECK_NE(&from, this);
  const HL_COMMAND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HL_COMMAND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usb2jtag.HL_COMMAND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usb2jtag.HL_COMMAND)
    MergeFrom(*source);
  }
}

void HL_COMMAND::MergeFrom(const HL_COMMAND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usb2jtag.HL_COMMAND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HL_COMMAND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usb2jtag.HL_COMMAND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HL_COMMAND::CopyFrom(const HL_COMMAND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usb2jtag.HL_COMMAND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HL_COMMAND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->commands())) return false;
  return true;
}

void HL_COMMAND::InternalSwap(HL_COMMAND* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commands_.InternalSwap(&other->commands_);
  swap(type_, other->type_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HL_COMMAND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROTOCOL::InitAsDefaultInstance() {
}
class PROTOCOL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROTOCOL>()._has_bits_);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROTOCOL::PROTOCOL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:usb2jtag.PROTOCOL)
}
PROTOCOL::PROTOCOL(const PROTOCOL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  // @@protoc_insertion_point(copy_constructor:usb2jtag.PROTOCOL)
}

void PROTOCOL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROTOCOL_jtag_5fcmd_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROTOCOL::~PROTOCOL() {
  // @@protoc_insertion_point(destructor:usb2jtag.PROTOCOL)
  SharedDtor();
}

void PROTOCOL::SharedDtor() {
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROTOCOL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROTOCOL& PROTOCOL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROTOCOL_jtag_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void PROTOCOL::Clear() {
// @@protoc_insertion_point(message_clear_start:usb2jtag.PROTOCOL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PROTOCOL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_target(), ptr, ctx, "usb2jtag.PROTOCOL.target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .usb2jtag.HL_COMMAND commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PROTOCOL::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:usb2jtag.PROTOCOL)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_target()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "usb2jtag.PROTOCOL.target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .usb2jtag.HL_COMMAND commands = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usb2jtag.PROTOCOL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usb2jtag.PROTOCOL)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* PROTOCOL::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usb2jtag.PROTOCOL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "usb2jtag.PROTOCOL.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // repeated .usb2jtag.HL_COMMAND commands = 2;
  for (auto it = this->commands_.pointer_begin(),
            end = this->commands_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, **it, target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usb2jtag.PROTOCOL)
  return target;
}

size_t PROTOCOL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usb2jtag.PROTOCOL)
  size_t total_size = 0;

  // required string target = 1;
  if (has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .usb2jtag.HL_COMMAND commands = 2;
  total_size += 1UL * this->commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROTOCOL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usb2jtag.PROTOCOL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROTOCOL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROTOCOL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usb2jtag.PROTOCOL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usb2jtag.PROTOCOL)
    MergeFrom(*source);
  }
}

void PROTOCOL::MergeFrom(const PROTOCOL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usb2jtag.PROTOCOL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  if (from.has_target()) {
    _has_bits_[0] |= 0x00000001u;
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
}

void PROTOCOL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usb2jtag.PROTOCOL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROTOCOL::CopyFrom(const PROTOCOL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usb2jtag.PROTOCOL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTOCOL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->commands())) return false;
  return true;
}

void PROTOCOL::InternalSwap(PROTOCOL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commands_.InternalSwap(&other->commands_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROTOCOL::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usb2jtag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::usb2jtag::JTAG_COMMAND* Arena::CreateMaybeMessage< ::usb2jtag::JTAG_COMMAND >(Arena* arena) {
  return Arena::CreateInternal< ::usb2jtag::JTAG_COMMAND >(arena);
}
template<> PROTOBUF_NOINLINE ::usb2jtag::HL_COMMAND* Arena::CreateMaybeMessage< ::usb2jtag::HL_COMMAND >(Arena* arena) {
  return Arena::CreateInternal< ::usb2jtag::HL_COMMAND >(arena);
}
template<> PROTOBUF_NOINLINE ::usb2jtag::PROTOCOL* Arena::CreateMaybeMessage< ::usb2jtag::PROTOCOL >(Arena* arena) {
  return Arena::CreateInternal< ::usb2jtag::PROTOCOL >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
