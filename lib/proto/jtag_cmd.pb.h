// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jtag_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jtag_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jtag_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jtag_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jtag_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jtag_5fcmd_2eproto;
namespace usb2jtag {
class HL_COMMAND;
class HL_COMMANDDefaultTypeInternal;
extern HL_COMMANDDefaultTypeInternal _HL_COMMAND_default_instance_;
class JTAG_COMMAND;
class JTAG_COMMANDDefaultTypeInternal;
extern JTAG_COMMANDDefaultTypeInternal _JTAG_COMMAND_default_instance_;
class PROTOCOL;
class PROTOCOLDefaultTypeInternal;
extern PROTOCOLDefaultTypeInternal _PROTOCOL_default_instance_;
class PROTOCOLS;
class PROTOCOLSDefaultTypeInternal;
extern PROTOCOLSDefaultTypeInternal _PROTOCOLS_default_instance_;
}  // namespace usb2jtag
PROTOBUF_NAMESPACE_OPEN
template<> ::usb2jtag::HL_COMMAND* Arena::CreateMaybeMessage<::usb2jtag::HL_COMMAND>(Arena*);
template<> ::usb2jtag::JTAG_COMMAND* Arena::CreateMaybeMessage<::usb2jtag::JTAG_COMMAND>(Arena*);
template<> ::usb2jtag::PROTOCOL* Arena::CreateMaybeMessage<::usb2jtag::PROTOCOL>(Arena*);
template<> ::usb2jtag::PROTOCOLS* Arena::CreateMaybeMessage<::usb2jtag::PROTOCOLS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace usb2jtag {

enum HL_COMMAND_CMD_TYPE : int {
  HL_COMMAND_CMD_TYPE_READ = 0,
  HL_COMMAND_CMD_TYPE_WRITE = 1,
  HL_COMMAND_CMD_TYPE_RESET = 2
};
bool HL_COMMAND_CMD_TYPE_IsValid(int value);
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND_CMD_TYPE_CMD_TYPE_MIN = HL_COMMAND_CMD_TYPE_READ;
constexpr HL_COMMAND_CMD_TYPE HL_COMMAND_CMD_TYPE_CMD_TYPE_MAX = HL_COMMAND_CMD_TYPE_RESET;
constexpr int HL_COMMAND_CMD_TYPE_CMD_TYPE_ARRAYSIZE = HL_COMMAND_CMD_TYPE_CMD_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HL_COMMAND_CMD_TYPE_descriptor();
template<typename T>
inline const std::string& HL_COMMAND_CMD_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HL_COMMAND_CMD_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HL_COMMAND_CMD_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HL_COMMAND_CMD_TYPE_descriptor(), enum_t_value);
}
inline bool HL_COMMAND_CMD_TYPE_Parse(
    const std::string& name, HL_COMMAND_CMD_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HL_COMMAND_CMD_TYPE>(
    HL_COMMAND_CMD_TYPE_descriptor(), name, value);
}
// ===================================================================

class JTAG_COMMAND :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usb2jtag.JTAG_COMMAND) */ {
 public:
  JTAG_COMMAND();
  virtual ~JTAG_COMMAND();

  JTAG_COMMAND(const JTAG_COMMAND& from);
  JTAG_COMMAND(JTAG_COMMAND&& from) noexcept
    : JTAG_COMMAND() {
    *this = ::std::move(from);
  }

  inline JTAG_COMMAND& operator=(const JTAG_COMMAND& from) {
    CopyFrom(from);
    return *this;
  }
  inline JTAG_COMMAND& operator=(JTAG_COMMAND&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JTAG_COMMAND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JTAG_COMMAND* internal_default_instance() {
    return reinterpret_cast<const JTAG_COMMAND*>(
               &_JTAG_COMMAND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JTAG_COMMAND& a, JTAG_COMMAND& b) {
    a.Swap(&b);
  }
  inline void Swap(JTAG_COMMAND* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JTAG_COMMAND* New() const final {
    return CreateMaybeMessage<JTAG_COMMAND>(nullptr);
  }

  JTAG_COMMAND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JTAG_COMMAND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JTAG_COMMAND& from);
  void MergeFrom(const JTAG_COMMAND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JTAG_COMMAND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usb2jtag.JTAG_COMMAND";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jtag_5fcmd_2eproto);
    return ::descriptor_table_jtag_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJtagStartFieldNumber = 1,
    kJtagEndFieldNumber = 2,
    kBitcountFieldNumber = 3,
    kPeriodFieldNumber = 4,
    kPayloadFieldNumber = 5,
    kDataOffsetFieldNumber = 6,
    kDataLengthFieldNumber = 7,
    kDataFieldNumber = 8,
    kDataIsOtherFieldNumber = 9,
    kDataIsAddressFieldNumber = 10,
    kWriteBackFieldNumber = 11,
  };
  // required uint32 jtag_start = 1;
  bool has_jtag_start() const;
  void clear_jtag_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 jtag_start() const;
  void set_jtag_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 jtag_end = 2;
  bool has_jtag_end() const;
  void clear_jtag_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 jtag_end() const;
  void set_jtag_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 bitcount = 3 [default = 0];
  bool has_bitcount() const;
  void clear_bitcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitcount() const;
  void set_bitcount(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 period = 4 [default = 0];
  bool has_period() const;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 payload = 5 [default = 0];
  bool has_payload() const;
  void clear_payload();
  ::PROTOBUF_NAMESPACE_ID::uint64 payload() const;
  void set_payload(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 data_offset = 6 [default = 0];
  bool has_data_offset() const;
  void clear_data_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_offset() const;
  void set_data_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 data_length = 7 [default = 0];
  bool has_data_length() const;
  void clear_data_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_length() const;
  void set_data_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 data = 8 [default = 0];
  bool has_data() const;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::uint64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool data_is_other = 9 [default = false];
  bool has_data_is_other() const;
  void clear_data_is_other();
  bool data_is_other() const;
  void set_data_is_other(bool value);

  // optional bool data_is_address = 10 [default = false];
  bool has_data_is_address() const;
  void clear_data_is_address();
  bool data_is_address() const;
  void set_data_is_address(bool value);

  // optional bool write_back = 11 [default = false];
  bool has_write_back() const;
  void clear_write_back();
  bool write_back() const;
  void set_write_back(bool value);

  // @@protoc_insertion_point(class_scope:usb2jtag.JTAG_COMMAND)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jtag_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jtag_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_;
  bool data_is_other_;
  bool data_is_address_;
  bool write_back_;
  friend struct ::TableStruct_jtag_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class HL_COMMAND :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usb2jtag.HL_COMMAND) */ {
 public:
  HL_COMMAND();
  virtual ~HL_COMMAND();

  HL_COMMAND(const HL_COMMAND& from);
  HL_COMMAND(HL_COMMAND&& from) noexcept
    : HL_COMMAND() {
    *this = ::std::move(from);
  }

  inline HL_COMMAND& operator=(const HL_COMMAND& from) {
    CopyFrom(from);
    return *this;
  }
  inline HL_COMMAND& operator=(HL_COMMAND&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HL_COMMAND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HL_COMMAND* internal_default_instance() {
    return reinterpret_cast<const HL_COMMAND*>(
               &_HL_COMMAND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HL_COMMAND& a, HL_COMMAND& b) {
    a.Swap(&b);
  }
  inline void Swap(HL_COMMAND* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HL_COMMAND* New() const final {
    return CreateMaybeMessage<HL_COMMAND>(nullptr);
  }

  HL_COMMAND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HL_COMMAND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HL_COMMAND& from);
  void MergeFrom(const HL_COMMAND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HL_COMMAND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usb2jtag.HL_COMMAND";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jtag_5fcmd_2eproto);
    return ::descriptor_table_jtag_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HL_COMMAND_CMD_TYPE CMD_TYPE;
  static constexpr CMD_TYPE READ =
    HL_COMMAND_CMD_TYPE_READ;
  static constexpr CMD_TYPE WRITE =
    HL_COMMAND_CMD_TYPE_WRITE;
  static constexpr CMD_TYPE RESET =
    HL_COMMAND_CMD_TYPE_RESET;
  static inline bool CMD_TYPE_IsValid(int value) {
    return HL_COMMAND_CMD_TYPE_IsValid(value);
  }
  static constexpr CMD_TYPE CMD_TYPE_MIN =
    HL_COMMAND_CMD_TYPE_CMD_TYPE_MIN;
  static constexpr CMD_TYPE CMD_TYPE_MAX =
    HL_COMMAND_CMD_TYPE_CMD_TYPE_MAX;
  static constexpr int CMD_TYPE_ARRAYSIZE =
    HL_COMMAND_CMD_TYPE_CMD_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_TYPE_descriptor() {
    return HL_COMMAND_CMD_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_TYPE_Name.");
    return HL_COMMAND_CMD_TYPE_Name(enum_t_value);
  }
  static inline bool CMD_TYPE_Parse(const std::string& name,
      CMD_TYPE* value) {
    return HL_COMMAND_CMD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 3,
  };
  // repeated .usb2jtag.JTAG_COMMAND commands = 2;
  int commands_size() const;
  void clear_commands();
  ::usb2jtag::JTAG_COMMAND* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::JTAG_COMMAND >*
      mutable_commands();
  const ::usb2jtag::JTAG_COMMAND& commands(int index) const;
  ::usb2jtag::JTAG_COMMAND* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::JTAG_COMMAND >&
      commands() const;

  // required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
  bool has_type() const;
  void clear_type();
  ::usb2jtag::HL_COMMAND_CMD_TYPE type() const;
  void set_type(::usb2jtag::HL_COMMAND_CMD_TYPE value);

  // required uint32 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:usb2jtag.HL_COMMAND)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::JTAG_COMMAND > commands_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_jtag_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class PROTOCOL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usb2jtag.PROTOCOL) */ {
 public:
  PROTOCOL();
  virtual ~PROTOCOL();

  PROTOCOL(const PROTOCOL& from);
  PROTOCOL(PROTOCOL&& from) noexcept
    : PROTOCOL() {
    *this = ::std::move(from);
  }

  inline PROTOCOL& operator=(const PROTOCOL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROTOCOL& operator=(PROTOCOL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROTOCOL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROTOCOL* internal_default_instance() {
    return reinterpret_cast<const PROTOCOL*>(
               &_PROTOCOL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PROTOCOL& a, PROTOCOL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROTOCOL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROTOCOL* New() const final {
    return CreateMaybeMessage<PROTOCOL>(nullptr);
  }

  PROTOCOL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROTOCOL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROTOCOL& from);
  void MergeFrom(const PROTOCOL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROTOCOL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usb2jtag.PROTOCOL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jtag_5fcmd_2eproto);
    return ::descriptor_table_jtag_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // repeated .usb2jtag.HL_COMMAND commands = 2;
  int commands_size() const;
  void clear_commands();
  ::usb2jtag::HL_COMMAND* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::HL_COMMAND >*
      mutable_commands();
  const ::usb2jtag::HL_COMMAND& commands(int index) const;
  ::usb2jtag::HL_COMMAND* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::HL_COMMAND >&
      commands() const;

  // required string target = 1;
  bool has_target() const;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // @@protoc_insertion_point(class_scope:usb2jtag.PROTOCOL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::HL_COMMAND > commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  friend struct ::TableStruct_jtag_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class PROTOCOLS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usb2jtag.PROTOCOLS) */ {
 public:
  PROTOCOLS();
  virtual ~PROTOCOLS();

  PROTOCOLS(const PROTOCOLS& from);
  PROTOCOLS(PROTOCOLS&& from) noexcept
    : PROTOCOLS() {
    *this = ::std::move(from);
  }

  inline PROTOCOLS& operator=(const PROTOCOLS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROTOCOLS& operator=(PROTOCOLS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROTOCOLS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROTOCOLS* internal_default_instance() {
    return reinterpret_cast<const PROTOCOLS*>(
               &_PROTOCOLS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PROTOCOLS& a, PROTOCOLS& b) {
    a.Swap(&b);
  }
  inline void Swap(PROTOCOLS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROTOCOLS* New() const final {
    return CreateMaybeMessage<PROTOCOLS>(nullptr);
  }

  PROTOCOLS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROTOCOLS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROTOCOLS& from);
  void MergeFrom(const PROTOCOLS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROTOCOLS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usb2jtag.PROTOCOLS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jtag_5fcmd_2eproto);
    return ::descriptor_table_jtag_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolsFieldNumber = 1,
  };
  // repeated .usb2jtag.PROTOCOL protocols = 1;
  int protocols_size() const;
  void clear_protocols();
  ::usb2jtag::PROTOCOL* mutable_protocols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::PROTOCOL >*
      mutable_protocols();
  const ::usb2jtag::PROTOCOL& protocols(int index) const;
  ::usb2jtag::PROTOCOL* add_protocols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::PROTOCOL >&
      protocols() const;

  // @@protoc_insertion_point(class_scope:usb2jtag.PROTOCOLS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::PROTOCOL > protocols_;
  friend struct ::TableStruct_jtag_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JTAG_COMMAND

// required uint32 jtag_start = 1;
inline bool JTAG_COMMAND::has_jtag_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JTAG_COMMAND::clear_jtag_start() {
  jtag_start_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JTAG_COMMAND::jtag_start() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.jtag_start)
  return jtag_start_;
}
inline void JTAG_COMMAND::set_jtag_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  jtag_start_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.jtag_start)
}

// required uint32 jtag_end = 2;
inline bool JTAG_COMMAND::has_jtag_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JTAG_COMMAND::clear_jtag_end() {
  jtag_end_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JTAG_COMMAND::jtag_end() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.jtag_end)
  return jtag_end_;
}
inline void JTAG_COMMAND::set_jtag_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  jtag_end_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.jtag_end)
}

// required uint32 bitcount = 3 [default = 0];
inline bool JTAG_COMMAND::has_bitcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JTAG_COMMAND::clear_bitcount() {
  bitcount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JTAG_COMMAND::bitcount() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.bitcount)
  return bitcount_;
}
inline void JTAG_COMMAND::set_bitcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bitcount_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.bitcount)
}

// required uint32 period = 4 [default = 0];
inline bool JTAG_COMMAND::has_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JTAG_COMMAND::clear_period() {
  period_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JTAG_COMMAND::period() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.period)
  return period_;
}
inline void JTAG_COMMAND::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  period_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.period)
}

// optional uint64 payload = 5 [default = 0];
inline bool JTAG_COMMAND::has_payload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JTAG_COMMAND::clear_payload() {
  payload_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JTAG_COMMAND::payload() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.payload)
  return payload_;
}
inline void JTAG_COMMAND::set_payload(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  payload_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.payload)
}

// optional uint32 data_offset = 6 [default = 0];
inline bool JTAG_COMMAND::has_data_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JTAG_COMMAND::clear_data_offset() {
  data_offset_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JTAG_COMMAND::data_offset() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.data_offset)
  return data_offset_;
}
inline void JTAG_COMMAND::set_data_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  data_offset_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.data_offset)
}

// optional uint32 data_length = 7 [default = 0];
inline bool JTAG_COMMAND::has_data_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JTAG_COMMAND::clear_data_length() {
  data_length_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JTAG_COMMAND::data_length() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.data_length)
  return data_length_;
}
inline void JTAG_COMMAND::set_data_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  data_length_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.data_length)
}

// optional uint64 data = 8 [default = 0];
inline bool JTAG_COMMAND::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JTAG_COMMAND::clear_data() {
  data_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JTAG_COMMAND::data() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.data)
  return data_;
}
inline void JTAG_COMMAND::set_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  data_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.data)
}

// optional bool data_is_other = 9 [default = false];
inline bool JTAG_COMMAND::has_data_is_other() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JTAG_COMMAND::clear_data_is_other() {
  data_is_other_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool JTAG_COMMAND::data_is_other() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.data_is_other)
  return data_is_other_;
}
inline void JTAG_COMMAND::set_data_is_other(bool value) {
  _has_bits_[0] |= 0x00000100u;
  data_is_other_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.data_is_other)
}

// optional bool data_is_address = 10 [default = false];
inline bool JTAG_COMMAND::has_data_is_address() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JTAG_COMMAND::clear_data_is_address() {
  data_is_address_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool JTAG_COMMAND::data_is_address() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.data_is_address)
  return data_is_address_;
}
inline void JTAG_COMMAND::set_data_is_address(bool value) {
  _has_bits_[0] |= 0x00000200u;
  data_is_address_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.data_is_address)
}

// optional bool write_back = 11 [default = false];
inline bool JTAG_COMMAND::has_write_back() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JTAG_COMMAND::clear_write_back() {
  write_back_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool JTAG_COMMAND::write_back() const {
  // @@protoc_insertion_point(field_get:usb2jtag.JTAG_COMMAND.write_back)
  return write_back_;
}
inline void JTAG_COMMAND::set_write_back(bool value) {
  _has_bits_[0] |= 0x00000400u;
  write_back_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.JTAG_COMMAND.write_back)
}

// -------------------------------------------------------------------

// HL_COMMAND

// required .usb2jtag.HL_COMMAND.CMD_TYPE type = 1;
inline bool HL_COMMAND::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HL_COMMAND::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::usb2jtag::HL_COMMAND_CMD_TYPE HL_COMMAND::type() const {
  // @@protoc_insertion_point(field_get:usb2jtag.HL_COMMAND.type)
  return static_cast< ::usb2jtag::HL_COMMAND_CMD_TYPE >(type_);
}
inline void HL_COMMAND::set_type(::usb2jtag::HL_COMMAND_CMD_TYPE value) {
  assert(::usb2jtag::HL_COMMAND_CMD_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.HL_COMMAND.type)
}

// repeated .usb2jtag.JTAG_COMMAND commands = 2;
inline int HL_COMMAND::commands_size() const {
  return commands_.size();
}
inline void HL_COMMAND::clear_commands() {
  commands_.Clear();
}
inline ::usb2jtag::JTAG_COMMAND* HL_COMMAND::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:usb2jtag.HL_COMMAND.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::JTAG_COMMAND >*
HL_COMMAND::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:usb2jtag.HL_COMMAND.commands)
  return &commands_;
}
inline const ::usb2jtag::JTAG_COMMAND& HL_COMMAND::commands(int index) const {
  // @@protoc_insertion_point(field_get:usb2jtag.HL_COMMAND.commands)
  return commands_.Get(index);
}
inline ::usb2jtag::JTAG_COMMAND* HL_COMMAND::add_commands() {
  // @@protoc_insertion_point(field_add:usb2jtag.HL_COMMAND.commands)
  return commands_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::JTAG_COMMAND >&
HL_COMMAND::commands() const {
  // @@protoc_insertion_point(field_list:usb2jtag.HL_COMMAND.commands)
  return commands_;
}

// required uint32 size = 3;
inline bool HL_COMMAND::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HL_COMMAND::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HL_COMMAND::size() const {
  // @@protoc_insertion_point(field_get:usb2jtag.HL_COMMAND.size)
  return size_;
}
inline void HL_COMMAND::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:usb2jtag.HL_COMMAND.size)
}

// -------------------------------------------------------------------

// PROTOCOL

// required string target = 1;
inline bool PROTOCOL::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PROTOCOL::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROTOCOL::target() const {
  // @@protoc_insertion_point(field_get:usb2jtag.PROTOCOL.target)
  return target_.GetNoArena();
}
inline void PROTOCOL::set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:usb2jtag.PROTOCOL.target)
}
inline void PROTOCOL::set_target(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:usb2jtag.PROTOCOL.target)
}
inline void PROTOCOL::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:usb2jtag.PROTOCOL.target)
}
inline void PROTOCOL::set_target(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:usb2jtag.PROTOCOL.target)
}
inline std::string* PROTOCOL::mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:usb2jtag.PROTOCOL.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PROTOCOL::release_target() {
  // @@protoc_insertion_point(field_release:usb2jtag.PROTOCOL.target)
  if (!has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PROTOCOL::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:usb2jtag.PROTOCOL.target)
}

// repeated .usb2jtag.HL_COMMAND commands = 2;
inline int PROTOCOL::commands_size() const {
  return commands_.size();
}
inline void PROTOCOL::clear_commands() {
  commands_.Clear();
}
inline ::usb2jtag::HL_COMMAND* PROTOCOL::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:usb2jtag.PROTOCOL.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::HL_COMMAND >*
PROTOCOL::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:usb2jtag.PROTOCOL.commands)
  return &commands_;
}
inline const ::usb2jtag::HL_COMMAND& PROTOCOL::commands(int index) const {
  // @@protoc_insertion_point(field_get:usb2jtag.PROTOCOL.commands)
  return commands_.Get(index);
}
inline ::usb2jtag::HL_COMMAND* PROTOCOL::add_commands() {
  // @@protoc_insertion_point(field_add:usb2jtag.PROTOCOL.commands)
  return commands_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::HL_COMMAND >&
PROTOCOL::commands() const {
  // @@protoc_insertion_point(field_list:usb2jtag.PROTOCOL.commands)
  return commands_;
}

// -------------------------------------------------------------------

// PROTOCOLS

// repeated .usb2jtag.PROTOCOL protocols = 1;
inline int PROTOCOLS::protocols_size() const {
  return protocols_.size();
}
inline void PROTOCOLS::clear_protocols() {
  protocols_.Clear();
}
inline ::usb2jtag::PROTOCOL* PROTOCOLS::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:usb2jtag.PROTOCOLS.protocols)
  return protocols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::PROTOCOL >*
PROTOCOLS::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:usb2jtag.PROTOCOLS.protocols)
  return &protocols_;
}
inline const ::usb2jtag::PROTOCOL& PROTOCOLS::protocols(int index) const {
  // @@protoc_insertion_point(field_get:usb2jtag.PROTOCOLS.protocols)
  return protocols_.Get(index);
}
inline ::usb2jtag::PROTOCOL* PROTOCOLS::add_protocols() {
  // @@protoc_insertion_point(field_add:usb2jtag.PROTOCOLS.protocols)
  return protocols_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usb2jtag::PROTOCOL >&
PROTOCOLS::protocols() const {
  // @@protoc_insertion_point(field_list:usb2jtag.PROTOCOLS.protocols)
  return protocols_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usb2jtag

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::usb2jtag::HL_COMMAND_CMD_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usb2jtag::HL_COMMAND_CMD_TYPE>() {
  return ::usb2jtag::HL_COMMAND_CMD_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jtag_5fcmd_2eproto
